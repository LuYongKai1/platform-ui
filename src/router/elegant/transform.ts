/* eslint-disable */
/* prettier-ignore */
// Generated by elegant-router
// Read more: https://github.com/soybeanjs/elegant-router

import type { RouteRecordRaw, RouteComponent } from 'vue-router';
import type { ElegantConstRoute } from '@elegant-router/vue';
import type { RouteMap, RouteKey, RoutePath } from '@elegant-router/types';

/**
 * transform elegant const routes to vue routes
 * @param routes elegant const routes
 * @param layouts layout components
 * @param views view components
 */
export function transformElegantRoutesToVueRoutes(
  routes: ElegantConstRoute[],
  layouts: Record<string, RouteComponent | (() => Promise<RouteComponent>)>,
  views: Record<string, RouteComponent | (() => Promise<RouteComponent>)>
) {
  return routes.flatMap(route => transformElegantRouteToVueRoute(route, layouts, views));
}

/**
 * transform elegant route to vue route
 * @param route elegant const route
 * @param layouts layout components
 * @param views view components
 */
function transformElegantRouteToVueRoute(
  route: ElegantConstRoute,
  layouts: Record<string, RouteComponent | (() => Promise<RouteComponent>)>,
  views: Record<string, RouteComponent | (() => Promise<RouteComponent>)>
) {
  const LAYOUT_PREFIX = 'layout.';
  const VIEW_PREFIX = 'view.';
  const ROUTE_DEGREE_SPLITTER = '_';
  const FIRST_LEVEL_ROUTE_COMPONENT_SPLIT = '$';

  function isLayout(component: string) {
    return component.startsWith(LAYOUT_PREFIX);
  }

  function getLayoutName(component: string) {
    const layout = component.replace(LAYOUT_PREFIX, '');

    if(!layouts[layout]) {
      throw new Error(`Layout component "${layout}" not found`);
    }

    return layout;
  }

  function isView(component: string) {
    return component.startsWith(VIEW_PREFIX);
  }

  function getViewName(component: string) {
    const view = component.replace(VIEW_PREFIX, '');

    if(!views[view]) {
      throw new Error(`View component "${view}" not found`);
    }

    return view;
  }

  function isFirstLevelRoute(item: ElegantConstRoute) {
    return !item.name.includes(ROUTE_DEGREE_SPLITTER);
  }

  function isSingleLevelRoute(item: ElegantConstRoute) {
    return isFirstLevelRoute(item) && !item.children?.length;
  }

  function getSingleLevelRouteComponent(component: string) {
    const [layout, view] = component.split(FIRST_LEVEL_ROUTE_COMPONENT_SPLIT);

    return {
      layout: getLayoutName(layout),
      view: getViewName(view)
    };
  }

  const vueRoutes: RouteRecordRaw[] = [];

  // add props: true to route
  if (route.path.includes(':') && !route.props) {
    route.props = true;
  }

  const { name, path, component, children, ...rest } = route;

  const vueRoute = { name, path, ...rest } as RouteRecordRaw;

  try {
    if (component) {
      if (isSingleLevelRoute(route)) {
        const { layout, view } = getSingleLevelRouteComponent(component);

        const singleLevelRoute: RouteRecordRaw = {
          path,
          component: layouts[layout],
          meta: {
            title: route.meta?.title || ''
          },
          children: [
            {
              name,
              path: '',
              component: views[view],
              ...rest
            } as RouteRecordRaw
          ]
        };

        return [singleLevelRoute];
      }

      if (isLayout(component)) {
        const layoutName = getLayoutName(component);

        vueRoute.component = layouts[layoutName];
      }

      if (isView(component)) {
        const viewName = getViewName(component);

        vueRoute.component = views[viewName];
      }

    }
  } catch (error: any) {
    console.error(`Error transforming route "${route.name}": ${error.toString()}`);
    return [];
  }

  // add redirect to child
  if (children?.length && !vueRoute.redirect) {
    vueRoute.redirect = {
      name: children[0].name
    };
  }

  if (children?.length) {
    const childRoutes = children.flatMap(child => transformElegantRouteToVueRoute(child, layouts, views));

    if(isFirstLevelRoute(route)) {
      vueRoute.children = childRoutes;
    } else {
      vueRoutes.push(...childRoutes);
    }
  }

  vueRoutes.unshift(vueRoute);

  return vueRoutes;
}

/**
 * map of route name and route path
 */
const routeMap: RouteMap = {
  "root": "/",
  "not-found": "/:pathMatch(.*)*",
  "exception": "/exception",
  "exception_403": "/exception/403",
  "exception_404": "/exception/404",
  "exception_500": "/exception/500",
  "document": "/document",
  "document_project": "/document/project",
  "document_project-link": "/document/project-link",
  "document_vue": "/document/vue",
  "document_vite": "/document/vite",
  "document_unocss": "/document/unocss",
  "document_naive": "/document/naive",
  "document_antd": "/document/antd",
  "document_alova": "/document/alova",
  "403": "/403",
  "404": "/404",
  "500": "/500",
  "about": "/about",
  "announcement": "/announcement",
  "announcement_activityimages": "/announcement/activityimages",
  "announcement_maintenance": "/announcement/maintenance",
  "announcement_notice": "/announcement/notice",
  "announcement_notifications": "/announcement/notifications",
  "business": "/business",
  "business_gemsshop": "/business/gemsshop",
  "business_orders": "/business/orders",
  "business_products": "/business/products",
  "channel": "/channel",
  "channel_channellist": "/channel/channellist",
  "game": "/game",
  "game_list": "/game/list",
  "giftmanage": "/giftmanage",
  "giftmanage_giftactivityconfig": "/giftmanage/giftactivityconfig",
  "giftmanage_giftcode": "/giftmanage/giftcode",
  "giftmanage_redeemrecord": "/giftmanage/redeemrecord",
  "guild": "/guild",
  "guild_guildmail": "/guild/guildmail",
  "guild_list": "/guild/list",
  "home": "/home",
  "iframe-page": "/iframe-page/:url",
  "log": "/log",
  "log_gmlog": "/log/gmlog",
  "log_logininfor": "/log/logininfor",
  "log_operlog": "/log/operlog",
  "login": "/login/:module(pwd-login|code-login|register|reset-pwd|bind-wechat)?",
  "ltv": "/ltv",
  "ltv_ltvpay": "/ltv/ltvpay",
  "ltv_ltvuser": "/ltv/ltvuser",
  "monitor": "/monitor",
  "monitor_corec": "/monitor/corec",
  "monitor_dev": "/monitor/dev",
  "monitor_job": "/monitor/job",
  "monitor_online": "/monitor/online",
  "operate": "/operate",
  "operate_mail": "/operate/mail",
  "operate_multiple": "/operate/multiple",
  "operate_server": "/operate/server",
  "overview": "/overview",
  "overview_overviewaadd": "/overview/overviewaadd",
  "overview_overviewrole": "/overview/overviewrole",
  "overview_overviewuser": "/overview/overviewuser",
  "questionnaire": "/questionnaire",
  "questionnaire_config": "/questionnaire/config",
  "questionnaire_surveyrecord": "/questionnaire/surveyrecord",
  "retention": "/retention",
  "retention_payretention": "/retention/payretention",
  "retention_retentionrole": "/retention/retentionrole",
  "retention_retentionuser": "/retention/retentionuser",
  "server": "/server",
  "server_log": "/server/log",
  "server_region": "/server/region",
  "server_servercross": "/server/servercross",
  "server_serverfile": "/server/serverfile",
  "server_servergroup": "/server/servergroup",
  "server_serveritem": "/server/serveritem",
  "server_white": "/server/white",
  "system": "/system",
  "system_config": "/system/config",
  "system_dept": "/system/dept",
  "system_dict": "/system/dict",
  "system_menu": "/system/menu",
  "system_notice": "/system/notice",
  "system_post": "/system/post",
  "system_role": "/system/role",
  "system_user": "/system/user",
  "user": "/user",
  "user_activate": "/user/activate",
  "user_player": "/user/player",
  "user_rolelist": "/user/rolelist",
  "user_users": "/user/users",
  "user_white": "/user/white",
  "user-center": "/user-center",
  "viewoperation": "/viewoperation",
  "viewoperation_activitygm": "/viewoperation/activitygm",
  "viewoperation_createtemplate": "/viewoperation/createtemplate",
  "viewoperation_gmtemplateparams": "/viewoperation/gmtemplateparams",
  "viewoperation_serveractivity": "/viewoperation/serveractivity",
  "viewoperation_startactivity": "/viewoperation/startactivity",
  "viewoperation_viewlogs": "/viewoperation/viewlogs"
};

/**
 * get route path by route name
 * @param name route name
 */
export function getRoutePath<T extends RouteKey>(name: T) {
  return routeMap[name];
}

/**
 * get route name by route path
 * @param path route path
 */
export function getRouteName(path: RoutePath) {
  const routeEntries = Object.entries(routeMap) as [RouteKey, RoutePath][];

  const routeName: RouteKey | null = routeEntries.find(([, routePath]) => routePath === path)?.[0] || null;

  return routeName;
}
