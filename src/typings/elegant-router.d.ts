/* eslint-disable */
/* prettier-ignore */
// Generated by elegant-router
// Read more: https://github.com/soybeanjs/elegant-router

declare module "@elegant-router/types" {
  type ElegantConstRoute = import('@elegant-router/vue').ElegantConstRoute;

  /**
   * route layout
   */
  export type RouteLayout = "base" | "blank";

  /**
   * route map
   */
  export type RouteMap = {
    "root": "/";
    "not-found": "/:pathMatch(.*)*";
    "exception": "/exception";
    "exception_403": "/exception/403";
    "exception_404": "/exception/404";
    "exception_500": "/exception/500";
    "document": "/document";
    "document_project": "/document/project";
    "document_project-link": "/document/project-link";
    "document_vue": "/document/vue";
    "document_vite": "/document/vite";
    "document_unocss": "/document/unocss";
    "document_naive": "/document/naive";
    "document_antd": "/document/antd";
    "document_alova": "/document/alova";
    "403": "/403";
    "404": "/404";
    "500": "/500";
    "about": "/about";
    "announcement": "/announcement";
    "announcement_activityimages": "/announcement/activityimages";
    "announcement_maintenance": "/announcement/maintenance";
    "announcement_notice": "/announcement/notice";
    "announcement_notifications": "/announcement/notifications";
    "business": "/business";
    "business_gemsshop": "/business/gemsshop";
    "business_orders": "/business/orders";
    "business_products": "/business/products";
    "channel": "/channel";
    "channel_channellist": "/channel/channellist";
    "game": "/game";
    "game_list": "/game/list";
    "giftmanage": "/giftmanage";
    "giftmanage_giftactivityconfig": "/giftmanage/giftactivityconfig";
    "giftmanage_giftcode": "/giftmanage/giftcode";
    "giftmanage_redeemrecord": "/giftmanage/redeemrecord";
    "guild": "/guild";
    "guild_guildmail": "/guild/guildmail";
    "guild_list": "/guild/list";
    "home": "/home";
    "iframe-page": "/iframe-page/:url";
    "log": "/log";
    "log_gmlog": "/log/gmlog";
    "log_logininfor": "/log/logininfor";
    "log_operlog": "/log/operlog";
    "login": "/login/:module(pwd-login|code-login|register|reset-pwd|bind-wechat)?";
    "ltv": "/ltv";
    "ltv_ltvpay": "/ltv/ltvpay";
    "ltv_ltvuser": "/ltv/ltvuser";
    "monitor": "/monitor";
    "monitor_corec": "/monitor/corec";
    "monitor_dev": "/monitor/dev";
    "monitor_job": "/monitor/job";
    "monitor_online": "/monitor/online";
    "operate": "/operate";
    "operate_mail": "/operate/mail";
    "operate_multiple": "/operate/multiple";
    "operate_server": "/operate/server";
    "overview": "/overview";
    "overview_overviewaadd": "/overview/overviewaadd";
    "overview_overviewrole": "/overview/overviewrole";
    "overview_overviewuser": "/overview/overviewuser";
    "questionnaire": "/questionnaire";
    "questionnaire_config": "/questionnaire/config";
    "questionnaire_surveyrecord": "/questionnaire/surveyrecord";
    "retention": "/retention";
    "retention_payretention": "/retention/payretention";
    "retention_retentionrole": "/retention/retentionrole";
    "retention_retentionuser": "/retention/retentionuser";
    "server": "/server";
    "server_log": "/server/log";
    "server_region": "/server/region";
    "server_servercross": "/server/servercross";
    "server_serverfile": "/server/serverfile";
    "server_servergroup": "/server/servergroup";
    "server_serveritem": "/server/serveritem";
    "server_white": "/server/white";
    "system": "/system";
    "system_config": "/system/config";
    "system_dept": "/system/dept";
    "system_dict": "/system/dict";
    "system_menu": "/system/menu";
    "system_notice": "/system/notice";
    "system_post": "/system/post";
    "system_role": "/system/role";
    "system_user": "/system/user";
    "user": "/user";
    "user_activate": "/user/activate";
    "user_player": "/user/player";
    "user_rolelist": "/user/rolelist";
    "user_users": "/user/users";
    "user_white": "/user/white";
    "user-center": "/user-center";
    "viewoperation": "/viewoperation";
    "viewoperation_activitygm": "/viewoperation/activitygm";
    "viewoperation_createtemplate": "/viewoperation/createtemplate";
    "viewoperation_gmtemplateparams": "/viewoperation/gmtemplateparams";
    "viewoperation_serveractivity": "/viewoperation/serveractivity";
    "viewoperation_startactivity": "/viewoperation/startactivity";
    "viewoperation_viewlogs": "/viewoperation/viewlogs";
  };

  /**
   * route key
   */
  export type RouteKey = keyof RouteMap;

  /**
   * route path
   */
  export type RoutePath = RouteMap[RouteKey];

  /**
   * custom route key
   */
  export type CustomRouteKey = Extract<
    RouteKey,
    | "root"
    | "not-found"
    | "exception"
    | "exception_403"
    | "exception_404"
    | "exception_500"
    | "document"
    | "document_project"
    | "document_project-link"
    | "document_vue"
    | "document_vite"
    | "document_unocss"
    | "document_naive"
    | "document_antd"
    | "document_alova"
  >;

  /**
   * the generated route key
   */
  export type GeneratedRouteKey = Exclude<RouteKey, CustomRouteKey>;

  /**
   * the first level route key, which contain the layout of the route
   */
  export type FirstLevelRouteKey = Extract<
    RouteKey,
    | "403"
    | "404"
    | "500"
    | "about"
    | "announcement"
    | "business"
    | "channel"
    | "game"
    | "giftmanage"
    | "guild"
    | "home"
    | "iframe-page"
    | "log"
    | "login"
    | "ltv"
    | "monitor"
    | "operate"
    | "overview"
    | "questionnaire"
    | "retention"
    | "server"
    | "system"
    | "user"
    | "user-center"
    | "viewoperation"
  >;

  /**
   * the custom first level route key
   */
  export type CustomFirstLevelRouteKey = Extract<
    CustomRouteKey,
    | "root"
    | "not-found"
    | "exception"
    | "document"
  >;

  /**
   * the last level route key, which has the page file
   */
  export type LastLevelRouteKey = Extract<
    RouteKey,
    | "403"
    | "404"
    | "500"
    | "iframe-page"
    | "login"
    | "about"
    | "announcement_activityimages"
    | "announcement_maintenance"
    | "announcement_notice"
    | "announcement_notifications"
    | "business_gemsshop"
    | "business_orders"
    | "business_products"
    | "channel_channellist"
    | "game"
    | "game_list"
    | "giftmanage_giftactivityconfig"
    | "giftmanage_giftcode"
    | "giftmanage_redeemrecord"
    | "guild_guildmail"
    | "guild_list"
    | "home"
    | "log_gmlog"
    | "log_logininfor"
    | "log_operlog"
    | "ltv_ltvpay"
    | "ltv_ltvuser"
    | "monitor_dev"
    | "monitor_corec"
    | "monitor_job"
    | "monitor_online"
    | "operate_mail"
    | "operate_multiple"
    | "operate_server"
    | "overview_overviewaadd"
    | "overview_overviewrole"
    | "overview_overviewuser"
    | "questionnaire_config"
    | "questionnaire_surveyrecord"
    | "retention_payretention"
    | "retention_retentionrole"
    | "retention_retentionuser"
    | "server_log"
    | "server_region"
    | "server_servercross"
    | "server_serverfile"
    | "server_servergroup"
    | "server_serveritem"
    | "server_white"
    | "system_config"
    | "system_dept"
    | "system_dict"
    | "system_menu"
    | "system_notice"
    | "system_post"
    | "system_role"
    | "system_user"
    | "user-center"
    | "user_activate"
    | "user_player"
    | "user_rolelist"
    | "user_users"
    | "user_white"
    | "viewoperation_activitygm"
    | "viewoperation_createtemplate"
    | "viewoperation_gmtemplateparams"
    | "viewoperation_serveractivity"
    | "viewoperation_startactivity"
    | "viewoperation_viewlogs"
  >;

  /**
   * the custom last level route key
   */
  export type CustomLastLevelRouteKey = Extract<
    CustomRouteKey,
    | "root"
    | "not-found"
    | "exception_403"
    | "exception_404"
    | "exception_500"
    | "document_project"
    | "document_project-link"
    | "document_vue"
    | "document_vite"
    | "document_unocss"
    | "document_naive"
    | "document_antd"
    | "document_alova"
  >;

  /**
   * the single level route key
   */
  export type SingleLevelRouteKey = FirstLevelRouteKey & LastLevelRouteKey;

  /**
   * the custom single level route key
   */
  export type CustomSingleLevelRouteKey = CustomFirstLevelRouteKey & CustomLastLevelRouteKey;

  /**
   * the first level route key, but not the single level
  */
  export type FirstLevelRouteNotSingleKey = Exclude<FirstLevelRouteKey, SingleLevelRouteKey>;

  /**
   * the custom first level route key, but not the single level
   */
  export type CustomFirstLevelRouteNotSingleKey = Exclude<CustomFirstLevelRouteKey, CustomSingleLevelRouteKey>;

  /**
   * the center level route key
   */
  export type CenterLevelRouteKey = Exclude<GeneratedRouteKey, FirstLevelRouteKey | LastLevelRouteKey>;

  /**
   * the custom center level route key
   */
  export type CustomCenterLevelRouteKey = Exclude<CustomRouteKey, CustomFirstLevelRouteKey | CustomLastLevelRouteKey>;

  /**
   * the center level route key
   */
  type GetChildRouteKey<K extends RouteKey, T extends RouteKey = RouteKey> = T extends `${K}_${infer R}`
    ? R extends `${string}_${string}`
      ? never
      : T
    : never;

  /**
   * the single level route
   */
  type SingleLevelRoute<K extends SingleLevelRouteKey = SingleLevelRouteKey> = K extends string
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component: `layout.${RouteLayout}$view.${K}`;
      }
    : never;

  /**
   * the last level route
   */
  type LastLevelRoute<K extends GeneratedRouteKey> = K extends LastLevelRouteKey
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component: `view.${K}`;
      }
    : never;
  
  /**
   * the center level route
   */
  type CenterLevelRoute<K extends GeneratedRouteKey> = K extends CenterLevelRouteKey
    ? Omit<ElegantConstRoute, 'component'> & {
        name: K;
        path: RouteMap[K];
        children: (CenterLevelRoute<GetChildRouteKey<K>> | LastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;

  /**
   * the multi level route
   */
  type MultiLevelRoute<K extends FirstLevelRouteNotSingleKey = FirstLevelRouteNotSingleKey> = K extends string
    ? ElegantConstRoute & {
        name: K;
        path: RouteMap[K];
        component: `layout.${RouteLayout}`;
        children: (CenterLevelRoute<GetChildRouteKey<K>> | LastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;
  
  /**
   * the custom first level route
   */
  type CustomSingleLevelRoute<K extends CustomFirstLevelRouteKey = CustomFirstLevelRouteKey> = K extends string
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component?: `layout.${RouteLayout}$view.${LastLevelRouteKey}`;
      }
    : never;

  /**
   * the custom last level route
   */
  type CustomLastLevelRoute<K extends CustomRouteKey> = K extends CustomLastLevelRouteKey
    ? Omit<ElegantConstRoute, 'children'> & {
        name: K;
        path: RouteMap[K];
        component?: `view.${LastLevelRouteKey}`;
      }
    : never;

  /**
   * the custom center level route
   */
  type CustomCenterLevelRoute<K extends CustomRouteKey> = K extends CustomCenterLevelRouteKey
    ? Omit<ElegantConstRoute, 'component'> & {
        name: K;
        path: RouteMap[K];
        children: (CustomCenterLevelRoute<GetChildRouteKey<K>> | CustomLastLevelRoute<GetChildRouteKey<K>>)[];
      }
    : never;

  /**
   * the custom multi level route
   */
  type CustomMultiLevelRoute<K extends CustomFirstLevelRouteNotSingleKey = CustomFirstLevelRouteNotSingleKey> =
    K extends string
      ? ElegantConstRoute & {
          name: K;
          path: RouteMap[K];
          component: `layout.${RouteLayout}`;
          children: (CustomCenterLevelRoute<GetChildRouteKey<K>> | CustomLastLevelRoute<GetChildRouteKey<K>>)[];
        }
      : never;

  /**
   * the custom route
   */
  type CustomRoute = CustomSingleLevelRoute | CustomMultiLevelRoute;

  /**
   * the generated route
   */
  type GeneratedRoute = SingleLevelRoute | MultiLevelRoute;

  /**
   * the elegant route
   */
  type ElegantRoute = GeneratedRoute | CustomRoute;
}
